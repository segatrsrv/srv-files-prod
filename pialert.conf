#-------------------------------------------------------------------------------
#  Pi.Alert
#  Open Source Network Guard / WIFI & LAN intrusion detector 
#
#  pialert.conf - Back module. Configuration file
#-------------------------------------------------------------------------------
#  Puche 2021        pi.alert.application@gmail.com        GNU GPLv3
#-------------------------------------------------------------------------------

# GENERAL settings
# ----------------------

PRINT_LOG               = False
TIMEZONE                = 'Europe/Moscow'
PIALERT_WEB_PROTECTION  = False
PIALERT_WEB_PASSWORD    = '8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92'

INCLUDED_SECTIONS       = ['internet', 'new_devices', 'down_devices', 'events']   # Specifies which events trigger notifications. 
                                                                                  # Remove the event type(s) you don't want to get notified on 
                                                                                  # Overrides device-specific settings in the UI.
SCAN_CYCLE_MINUTES      = 5            # delay between scans

# EMAIL settings
# ----------------------
SMTP_SERVER             = '172.23.0.30'
SMTP_PORT               = 2525
SMTP_USER               = 'use2r@gmail.com'
SMTP_PASS               = 'password'
SMTP_SKIP_TLS           = True
SMTP_SKIP_LOGIN         = True

REPORT_MAIL             = True
REPORT_FROM             = 'Pi.Alert <' + SMTP_USER +'>'
REPORT_TO               = 'user@gmail.com'
REPORT_DEVICE_URL       = 'http://pi.alert/deviceDetails.php?mac='
REPORT_DASHBOARD_URL    = 'http://pi.alert/'

# Webhook settings
# ----------------------
REPORT_WEBHOOK          = False
WEBHOOK_URL             = 'http://n8n.local:5555/webhook-test/aaaaaaaa-aaaa-aaaa-aaaaa-aaaaaaaaaaaa'
WEBHOOK_PAYLOAD         = 'json'       # webhook payload data format for the "body > attachements > text" attribute 
                                       # in https://github.com/jokob-sk/Pi.Alert/blob/main/docs/webhook_json_sample.json 
                                       #   supported values: 'json', 'html' or 'text'
                                       #   e.g.: for discord use 'html'
WEBHOOK_REQUEST_METHOD  = 'GET'        # POST, GET...

# Apprise settings
#-----------------------
REPORT_APPRISE          = False
APPRISE_HOST            = 'http://localhost:8000/notify'
APPRISE_URL             = 'mailto://smtp-relay.sendinblue.com:587?from=user@gmail.com&name=apprise&user=user@gmail.com&pass=password&to=user@gmail.com'

# NTFY (https://ntfy.sh/) settings
# ----------------------
REPORT_NTFY             = False
NTFY_HOST               = 'https://ntfy.sh'
NTFY_TOPIC              = 'replace_my_secure_topicname_91h889f28'
NTFY_USER               = 'user'       # set username... 
NTFY_PASSWORD           = 'passw0rd'   # ...and password if authentication is used https://docs.ntfy.sh/config/#users-and-roles

# PUSHSAFER (https://www.pushsafer.com/) settings
# ----------------------
REPORT_PUSHSAFER        = False
PUSHSAFER_TOKEN         = 'ApiKey'

# MQTT settings
# ----------------------
REPORT_MQTT             = False
MQTT_BROKER             = '192.168.1.2'
MQTT_PORT               = 1883
MQTT_USER               = 'mqtt'
MQTT_PASSWORD           = 'passw0rd'
MQTT_QOS                = 0
MQTT_DELAY_SEC          = 2            # delay in seconds, increase if not all devices are created in Home Assistant

# DynDNS
# ----------------------
# QUERY_MYIP_SERVER       = 'https://diagnostic.opendns.com/myip'
QUERY_MYIP_SERVER       = 'http://ipv4.icanhazip.com'
DDNS_ACTIVE             = False
DDNS_DOMAIN             = 'your_domain.freeddns.org'
DDNS_USER               = 'dynu_user'
DDNS_PASSWORD           = 'A0000000B0000000C0000000D0000000'
DDNS_UPDATE_URL         = 'https://api.dynu.com/nic/update?'

# PIHOLE settings
# ----------------------
PIHOLE_ACTIVE           = False                         # if enabled you need to map '/etc/pihole/pihole-FTL.db' in docker-compose.yml
PIHOLE_DB               = '/etc/pihole/pihole-FTL.db'
DHCP_ACTIVE             = False                         # if enabled you need to map '/etc/pihole/dhcp.leases' in docker-compose.yml
DHCP_LEASES             = '/etc/pihole/dhcp.leases'

# arp-scan options & samples
# ----------------------
#
# Scan local network (default)
# SCAN_SUBNETS    = '--localnet'
#
# Scan two subnets
# SCAN_SUBNETS    = '192.168.11.0/24 192.168.144.0/24'
#
# Scan using interface eth0
# SCAN_SUBNETS    = '--localnet --interface=eth0'
#
# Scan multiple interfaces (eth1 and eth0):
# SCAN_SUBNETS    = [ '192.168.1.0/24 --interface=eth1', '192.168.1.0/24 --interface=eth0' ]

SCAN_SUBNETS            = '--localnet'

# Maintenance Task Settings
# ----------------------
DAYS_TO_KEEP_EVENTS = 90
